      - name: Fetch SP items & notify Telegram
        env:
          CLIENT_ID:    ${{ secrets.CLIENT_ID }}
          TENANT_ID:    ${{ secrets.TENANT_ID }}
          CLIENT_SECRET:${{ secrets.CLIENT_SECRET }}
          SITE_ID:      ${{ secrets.SITE_ID }}
          LIST_ID:      ${{ secrets.LIST_ID }}
          BOT_TOKEN:    ${{ secrets.BOT_TOKEN }}
          CHAT_ID:      ${{ secrets.CHAT_ID }}
        run: |
          pip install msal requests
          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # Authenticate with Azure AD
          app = msal.ConfidentialClientApplication(
            os.environ['CLIENT_ID'],
            authority=f"https://login.microsoftonline.com/{os.environ['TENANT_ID']}",
            client_credential=os.environ['CLIENT_SECRET']
          )
          token = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])["access_token"]

          # Environment variables
          site  = os.environ['SITE_ID']
          list_ = os.environ['LIST_ID']
          state = pathlib.Path("last_state.json")

          # Load last timestamp (default: 1 hour ago)
          last = int(time.time()) - 3600
          if state.exists():
            last = json.loads(state.read_text()).get("last", last)

          # Fetch items, sorted by createdDateTime descending
          url = (
            f"https://graph.microsoft.com/v1.0/sites/{site}"
            f"/lists/{list_}/items"
            "?$expand=fields"
            "&$orderby=createdDateTime desc"
          )
          resp = requests.get(url, headers={"Authorization":f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])

          new_last = last
          for itm in items:
            # Parse the created timestamp
            ts = int(time.mktime(time.strptime(itm["createdDateTime"], "%Y-%m-%dT%H:%M:%SZ")))
            if ts <= last:
              break

            title = itm["fields"].get("Title", "No title")
            link  = itm.get("webUrl")
            text  = f"*{title}*\n{link}"
            # Send to Telegram
            p = requests.post(
              f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
              json={"chat_id":os.environ['CHAT_ID'], "parse_mode":"Markdown", "text":text}
            )
            p.raise_for_status()
            new_last = max(new_last, ts)

          # Persist the newest timestamp
          state.write_text(json.dumps({"last":new_last}))
          EOF
