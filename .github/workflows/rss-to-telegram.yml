name: SharePoint â†’ Telegram

on:
  schedule:
    - cron: '*/10 * * * *'    # run every 10 minutes
  workflow_dispatch:         # also allow manual runs

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch SP items & notify Telegram
        env:
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
          STATE_FILE:          last_sp.json
        run: |
          pip install msal requests

          python3 - << 'EOF'
          import os, json, time, requests, pathlib
          from msal import ConfidentialClientApplication

          # load environment
          TENANT = os.environ['AZURE_TENANT_ID']
          CLIENT_ID = os.environ['AZURE_CLIENT_ID']
          CLIENT_SECRET = os.environ['AZURE_CLIENT_SECRET']
          SITE_ID = os.environ['SITE_ID']
          LIST_ID = os.environ['LIST_ID']
          BOT = os.environ['BOT_TOKEN']
          CHAT = os.environ['CHAT_ID']
          STATE_F = pathlib.Path(os.getcwd()) / os.environ['STATE_FILE']

          # get an app-only token
          app = ConfidentialClientApplication(
            CLIENT_ID,
            authority=f"https://login.microsoftonline.com/{TENANT}",
            client_credential=CLIENT_SECRET
          )
          result = app.acquire_token_for_client(scopes=["https://graph.microsoft.com/.default"])
          token = result.get("access_token")
          if not token:
            raise Exception(f"No token: {json.dumps(result)}")

          # load last-run, default 1h ago
          last = int(time.time()) - 3600
          if STATE_F.exists():
            last = json.loads(STATE_F.read_text()).get("last", last)

          # fetch list items, ordered by created date
          url = (
            "https://graph.microsoft.com/v1.0"
            f"/sites/{SITE_ID}/lists/{LIST_ID}/items"
            "?expand=fields&$orderby=fields/CreatedDateTime"
          )
          headers = {"Authorization": "Bearer " + token}
          resp = requests.get(url, headers=headers)
          resp.raise_for_status()
          items = resp.json().get("value", [])

          new_last = last
          for item in items:
            f = item.get("fields", {})
            cd = f.get("CreatedDateTime")
            if not cd:
              continue
            ts = int(time.mktime(time.strptime(cd, "%Y-%m-%dT%H:%M:%SZ")))
            if ts <= last:
              continue

            # send to Telegram
            text = f"*{f.get('Title','(no title)')}*\nCreated: {cd}"
            r = requests.post(
              f"https://api.telegram.org/bot{BOT}/sendMessage",
              json={"chat_id": CHAT, "parse_mode": "Markdown", "text": text}
            )
            r.raise_for_status()
            new_last = max(new_last, ts)

          # write cursor
          STATE_F.write_text(json.dumps({"last": new_last}))
          EOF
