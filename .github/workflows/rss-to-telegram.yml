name: SharePoint → Telegram

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch SP items & notify Telegram
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail
          echo "🔧 Installing Python packages..."
          pip install --user msal requests

          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # — AUTH with Azure AD —
          app = msal.ConfidentialClientApplication(
            os.environ['AZURE_CLIENT_ID'],
            authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
            client_credential=os.environ['AZURE_CLIENT_SECRET']
          )
          token_resp = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])
          if "access_token" not in token_resp:
              print("❌ Azure auth failed:", json.dumps(token_resp, indent=2))
              exit(1)
          token = token_resp["access_token"]

          # — BUILD Graph URL (single f-string) —
          site = os.environ['SITE_ID']
          lst  = os.environ['LIST_ID']
          url = (
            f"https://graph.microsoft.com/v1.0/sites/{site}/lists/{lst}/items"
            f"?$expand=fields&$orderby=fields/Created desc"
          )
          print("➡️ Fetching:", url)

          # — LOAD last timestamp (default: 1 hour ago) —
          state_file = pathlib.Path("last_state.json")
          last = int(time.time()) - 3600
          if state_file.exists():
              last = json.loads(state_file.read_text()).get("last", last)

          # — FETCH & LOOP —
          resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])
          print(f"🔢 Received {len(items)} items")

          new_last = last
          for idx, itm in enumerate(items, start=1):
              dt = itm.get("fields", {}).get("Created")  # use the SharePoint “Created” field
              print(f"🔄 Loop #{idx} — id={itm.get('id')} Created={dt}")
              if not dt:
                  print("   ↳ SKIP (no Created)")
                  continue

              # parse the SP “Created” value (e.g. "2025-06-27T12:34:56Z")
              ts = int(time.mktime(time.strptime(dt, "%Y-%m-%dT%H:%M:%SZ")))
              print(f"   ↳ parsed ts={ts}, last={last}")
              if ts <= last:
                  print("   ↳ BREAK (already processed)")
                  break

              title = itm["fields"].get("Title", "<no title>")
              link  = itm.get("webUrl")
              print(f"   ↳ SENDING message: {title}")
              r = requests.post(
                f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
                json={
                  "chat_id": os.environ['CHAT_ID'],
                  "parse_mode": "Markdown",
                  "text": f"*{title}*\n{link}"
                }
              )
              r.raise_for_status()
              new_last = max(new_last, ts)
              print(f"   ↳ new_last updated to {new_last}")

          # — SAVE state —
          state_file.write_text(json.dumps({"last": new_last}))
          EOF
