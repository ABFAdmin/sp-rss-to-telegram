name: SharePoint ‚Üí Telegram

# run on schedule (every 10m) and allow manual dispatch
on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  notify:
    name: Fetch SP items & notify Telegram
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install deps & run notifier
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail
          echo "üîß Installing Python packages..."
          pip install --user msal requests

          echo "üêù Debug BOT_TOKEN=${BOT_TOKEN:0:10}‚Ä¶"
          echo "üêù Debug CHAT_ID=$CHAT_ID"
          echo "üêù Debug SITE_ID=$SITE_ID"
          echo "üêù Debug LIST_ID=$LIST_ID"

          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # ‚Äî AUTH WITH AZURE AD ‚Äî
          app = msal.ConfidentialClientApplication(
              os.environ["AZURE_CLIENT_ID"],
              authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
              client_credential=os.environ["AZURE_CLIENT_SECRET"]
          )
          tok = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])
          if "access_token" not in tok:
              print("‚ùå Azure auth failed:", json.dumps(tok, indent=2))
              exit(1)
          token = tok["access_token"]

          # ‚Äî BUILD GRAPH URL ‚Äî
          site = os.environ["SITE_ID"]
          lst  = os.environ["LIST_ID"]
          url  = (
              f"https://graph.microsoft.com/v1.0/"
              f"sites/{site}/lists/{lst}/items"
              f"?$expand=fields&$orderby=fields/createdDateTime%20desc"
          )
          print("‚û°Ô∏è Fetching:", url)

          # ‚Äî LOAD LAST TIMESTAMP ‚Äî
          state_file = pathlib.Path("last_state.json")
          last = int(time.time()) - 3600
          if state_file.exists():
              last = json.loads(state_file.read_text()).get("last", last)

          # ‚Äî GET LIST ITEMS ‚Äî
          resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])

          new_last = last
          for itm in items:
              dt = itm.get("fields", {}).get("createdDateTime")
              if not dt: continue
              ts = int(time.mktime(time.strptime(dt, "%Y-%m-%dT%H:%M:%SZ")))
              if ts <= last: break

              title = itm["fields"].get("Title", "<no title>")
              link  = itm.get("webUrl")
              text  = f"*{title}*\n{link}"
              print("‚û°Ô∏è Sending:", title)

              send = requests.post(
                  f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
                  json={
                    "chat_id": os.environ["CHAT_ID"],
                    "parse_mode": "Markdown",
                    "text": text
                  }
              )
              send.raise_for_status()
              new_last = max(new_last, ts)

          state_file.write_text(json.dumps({"last": new_last}))
          EOF
