name: SharePoint → Telegram

on:
  # run every 10 minutes
  schedule:
    - cron: '*/10 * * * *'
  # allow manual dispatch
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch SP items & notify Telegram
        # these must match the names of the GitHub repository secrets you created
        env:
          CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          SITE_ID:       ${{ secrets.SITE_ID }}
          LIST_ID:       ${{ secrets.LIST_ID }}
          BOT_TOKEN:     ${{ secrets.BOT_TOKEN }}
          CHAT_ID:       ${{ secrets.CHAT_ID }}
        run: |
          # install what we need
          pip install msal requests

          # run our Python snippet
          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # 1) authenticate to Graph via client credentials
          app = msal.ConfidentialClientApplication(
              os.environ['CLIENT_ID'],
              authority=f"https://login.microsoftonline.com/{os.environ['TENANT_ID']}",
              client_credential=os.environ['CLIENT_SECRET']
          )
          token = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])["access_token"]

          # 2) grab our parameters
          site  = os.environ['SITE_ID']
          list_ = os.environ['LIST_ID']
          state_file = pathlib.Path("last_state.json")

          # 3) figure out "since when"
          last = int(time.time()) - 3600
          if state_file.exists():
              last = json.loads(state_file.read_text()).get("last", last)

          # 4) call Graph to get items sorted newest → oldest
          url = (
              f"https://graph.microsoft.com/v1.0/sites/{site}"
              f"/lists/{list_}/items"
              "?$expand=fields&$orderby=createdDateTime desc"
          )
          resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])

          new_last = last
          for itm in items:
              # parse the createdDateTime
              ts = int(time.mktime(time.strptime(itm["createdDateTime"], "%Y-%m-%dT%H:%M:%SZ")))
              if ts <= last:
                  break
              title = itm["fields"].get("Title", "")
              link  = itm["webUrl"]
              text  = f"*{title}*\n{link}"

              # post into Telegram
              p = requests.post(
                  f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
                  json={"chat_id": os.environ['CHAT_ID'], "parse_mode": "Markdown", "text": text}
              )
              p.raise_for_status()
              new_last = max(new_last, ts)

          # 5) save the newest timestamp so next run skips old items
          state_file.write_text(json.dumps({"last": new_last}))
          EOF
