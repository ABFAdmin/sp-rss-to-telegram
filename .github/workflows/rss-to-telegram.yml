name: SharePoint ‚Üí Telegram

on:
  schedule:
    - cron: '*/10 * * * *'      # every 10 minutes
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # 1) Restore our last_state.json from cache (if any)
      - name: Restore last_state cache
        uses: actions/cache@v3
        with:
          path: last_state.json
          key: last-state-${{ runner.os }}        # one cache per OS
          restore-keys: |
            last-state-${{ runner.os }}

      - name: Fetch SP items & notify Telegram
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail

          echo "üîß Installing Python packages..."
          pip install --user msal requests

          echo "üêù Debug BOT_TOKEN=${BOT_TOKEN:0:10}‚Ä¶"
          echo "üêù Debug CHAT_ID=$CHAT_ID"
          echo "üêù Debug SITE_ID=$SITE_ID"
          echo "üêù Debug LIST_ID=$LIST_ID"

          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # ‚Äî AUTH with Azure AD ‚Äî
          app = msal.ConfidentialClientApplication(
            os.environ['AZURE_CLIENT_ID'],
            authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
            client_credential=os.environ['AZURE_CLIENT_SECRET']
          )
          token_resp = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])
          if "access_token" not in token_resp:
              print("‚ùå Azure auth failed:", json.dumps(token_resp, indent=2))
              exit(1)
          token = token_resp["access_token"]

          # ‚Äî BUILD Graph URL ‚Äî
          site = os.environ['SITE_ID']
          lst  = os.environ['LIST_ID']
          url = (
            f"https://graph.microsoft.com/v1.0/sites/{site}"
            f"/lists/{lst}/items"
            f"?$expand=fields"
            f"&$orderby=fields/CreatedDateTime%20desc"
          )
          print("‚û°Ô∏è Fetching:", url)

          # ‚Äî LOAD last timestamp (default: 1 hour ago) ‚Äî
          state_file = pathlib.Path("last_state.json")
          last = int(time.time()) - 3600
          if state_file.exists():
              last = json.loads(state_file.read_text()).get("last", last)
          print(f"üïí Loaded last timestamp = {last}")

          # ‚Äî FETCH & LOOP ‚Äî
          resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])
          print(f"üî¢ Received {len(items)} items")

          new_last = last
          for idx, itm in enumerate(items, start=1):
              dt = itm.get("fields", {}).get("CreatedDateTime") or itm.get("createdDateTime")
              print(f"üîÑ Loop #{idx} ‚Äî id={itm.get('id')} createdDateTime={dt}")
              if not dt:
                  continue
              ts = int(time.mktime(time.strptime(dt, "%Y-%m-%dT%H:%M:%SZ")))
              if ts <= last:
                  print("   ‚Ü≥ STOP‚Äîno newer items")
                  break

              title = itm["fields"].get("Title", "<no title>")
              link  = itm.get("webUrl")
              print(f"   ‚Ü≥ SENDING message: {title}")
              result = requests.post(
                f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
                json={
                  "chat_id": os.environ['CHAT_ID'],
                  "parse_mode": "Markdown",
                  "text": f"*{title}*\n{link}"
                }
              )
              result.raise_for_status()
              new_last = max(new_last, ts)

          # ‚Äî SAVE state for next run ‚Äî
          state_file.write_text(json.dumps({"last": new_last}))
          print(f"üíæ Saved new timestamp = {new_last}")
          EOF

      # 2) Save the updated last_state.json back into the cache
      - name: Save last_state cache
        uses: actions/cache@v3
        with:
          path: last_state.json
          key: last-state-${{ runner.os }}
