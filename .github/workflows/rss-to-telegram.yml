name: SharePoint ‚Üí Telegram

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'  # every 10 minutes

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install deps & run notifier
        # use bash so heredoc works
        shell: bash
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail

          echo "üîß Installing Python packages‚Ä¶"
          pip install --user msal requests

          echo "üêû Debug BOT_TOKEN=${BOT_TOKEN:0:10}‚Ä¶"
          echo "üêû Debug CHAT_ID=$CHAT_ID"
          echo "üêû Debug SITE_ID=$SITE_ID"
          echo "üêû Debug LIST_ID=$LIST_ID"

          python3 - << 'EOF'
import os, json, time, msal, requests, pathlib

# ‚Äî AUTH ‚Äî
app = msal.ConfidentialClientApplication(
    os.environ["AZURE_CLIENT_ID"],
    authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
    client_credential=os.environ["AZURE_CLIENT_SECRET"]
)
token_resp = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])
if "access_token" not in token_resp:
    print("‚ùå Azure auth failed:", json.dumps(token_resp, indent=2))
    exit(1)
token = token_resp["access_token"]

# ‚Äî BUILD URL ‚Äî
site = os.environ["SITE_ID"]
lst  = os.environ["LIST_ID"]
url  = (
    f"https://graph.microsoft.com/v1.0/sites/{site}"
    f"/lists/{lst}/items"
    "?$expand=fields&$orderby=fields/CreatedDateTime desc"
)

# ‚Äî STATE FILE ‚Äî
state = pathlib.Path("last_state.json")
last  = int(time.time()) - 3600
if state.exists():
    last = json.loads(state.read_text()).get("last", last)

# ‚Äî FETCH ITEMS ‚Äî
resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
if resp.status_code != 200:
    print("‚ùå Graph API error:", resp.status_code, resp.text)
    exit(1)
items = resp.json().get("value", [])

# ‚Äî SEND NEW ITEMS ‚Äî
new_last = last
for itm in items:
    created = itm["fields"].get("CreatedDateTime")
    if not created:
        continue
    ts = int(time.mktime(time.strptime(created, "%Y-%m-%dT%H:%M:%SZ")))
    if ts <= last:
        break

    text = f"*{itm['fields'].get('Title','(no title)')}*\n{itm.get('webUrl')}"
    print("‚û°Ô∏è Sending to Telegram:", text)
    tg = requests.post(
        f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
        json={"chat_id": os.environ["CHAT_ID"], "parse_mode":"Markdown", "text": text}
    )
    if tg.status_code != 200:
        print("‚ùå Telegram error:", tg.status_code, tg.text)
        exit(1)
    new_last = max(new_last, ts)

state.write_text(json.dumps({"last": new_last}))
EOF
