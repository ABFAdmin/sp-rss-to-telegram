name: SharePoint â†’ Telegram

# trigger every 10 minutes + manual
on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:

      # 1) grab your code
      - name: Check out repo
        uses: actions/checkout@v3

      # 2) install Python deps & run our notifier script
      - name: Install deps & run notifier
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          pip install msal requests
          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib

          # 1) authenticate
          app = msal.ConfidentialClientApplication(
            os.environ['AZURE_CLIENT_ID'],
            authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
            client_credential=os.environ['AZURE_CLIENT_SECRET']
          )
          token = app.acquire_token_for_client(
            ["https://graph.microsoft.com/.default"]
          )["access_token"]

          # 2) load last-run timestamp
          state_file = pathlib.Path("last_state.json")
          last = int(time.time()) - 3600
          if state_file.exists():
            last = json.loads(state_file.read_text()).get("last", last)

          # 3) fetch items
          site = os.environ['SITE_ID']
          lst  = os.environ['LIST_ID']
          url = (
            f"https://graph.microsoft.com/v1.0/sites/{site}"
            f"/lists/{lst}/items?$expand=fields"
          )
          resp = requests.get(url, headers={"Authorization":f"Bearer {token}"})
          resp.raise_for_status()
          items = resp.json().get("value", [])

          # 4) sort desc by createdDateTime (top-level)
          items.sort(key=lambda i: i["createdDateTime"], reverse=True)

          new_last = last
          for itm in items:
            ts = int(time.mktime(
              time.strptime(itm["createdDateTime"], "%Y-%m-%dT%H:%M:%SZ")
            ))
            if ts <= last:
              break

            title = itm["fields"].get("Title", "(no title)")
            link  = itm.get("webUrl")
            text  = f"*{title}*\n{link}"

            r = requests.post(
              f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
              json={
                "chat_id": os.environ['CHAT_ID'],
                "parse_mode": "Markdown",
                "text": text
              }
            )
            r.raise_for_status()
            new_last = max(new_last, ts)

          # 5) persist watermark
          state_file.write_text(json.dumps({"last":new_last}))
          EOF
