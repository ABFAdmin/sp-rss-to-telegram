name: SharePoint ‚Üí Telegram
# Run every 10 minutes + allow manual dispatch
on:
  schedule:
    - cron: '*/10 * * * *'  # Fixed: added missing fields
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4  # Updated to v4
        
      - name: Fetch SP items & notify Telegram
        env:
          AZURE_CLIENT_ID:     ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID:     ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SITE_ID:             ${{ secrets.SITE_ID }}
          LIST_ID:             ${{ secrets.LIST_ID }}
          BOT_TOKEN:           ${{ secrets.BOT_TOKEN }}
          CHAT_ID:             ${{ secrets.CHAT_ID }}
        run: |
          set -euo pipefail
          echo "üîß Installing Python packages..."
          pip install --user msal requests python-dateutil
          
          echo "üêù Debug BOT_TOKEN=${BOT_TOKEN:0:10}‚Ä¶"
          echo "üêù Debug CHAT_ID=$CHAT_ID"
          echo "üêù Debug SITE_ID=$SITE_ID"
          echo "üêù Debug LIST_ID=$LIST_ID"
          
          python3 - << 'EOF'
          import os, json, time, msal, requests, pathlib
          from dateutil import parser
          
          # ‚Äî AUTH with Azure AD ‚Äî
          app = msal.ConfidentialClientApplication(
              os.environ['AZURE_CLIENT_ID'],
              authority=f"https://login.microsoftonline.com/{os.environ['AZURE_TENANT_ID']}",
              client_credential=os.environ['AZURE_CLIENT_SECRET']
          )
          
          token_resp = app.acquire_token_for_client(["https://graph.microsoft.com/.default"])
          if "access_token" not in token_resp:
              print("‚ùå Azure auth failed:", json.dumps(token_resp, indent=2))
              exit(1)
          
          token = token_resp["access_token"]
          print("‚úÖ Azure authentication successful")
          
          # ‚Äî BUILD Graph URL ‚Äî
          site = os.environ['SITE_ID']
          lst  = os.environ['LIST_ID']
          
          # Try multiple approaches to get recent items
          urls_to_try = [
              # Original approach
              (f"https://graph.microsoft.com/v1.0/sites/{site}/lists/{lst}/items"
               f"?$expand=fields&$orderby=createdDateTime desc&$top=10", "createdDateTime desc"),
              
              # Try lastModifiedDateTime instead
              (f"https://graph.microsoft.com/v1.0/sites/{site}/lists/{lst}/items"
               f"?$expand=fields&$orderby=lastModifiedDateTime desc&$top=10", "lastModifiedDateTime desc"),
               
              # Try without ordering to see all items
              (f"https://graph.microsoft.com/v1.0/sites/{site}/lists/{lst}/items"
               f"?$expand=fields&$top=50", "no ordering")
          ]
          
          for url, description in urls_to_try:
              print(f"\n‚û°Ô∏è Trying {description}: {url}")
              try:
                  resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
                  resp.raise_for_status()
                  data = resp.json()
                  items = data.get("value", [])
                  print(f"   üî¢ Got {len(items)} items with {description}")
                  
                  if items:
                      print(f"   üìÖ Most recent 3 items:")
                      for i, item in enumerate(items[:3]):
                          created = item.get("createdDateTime")
                          modified = item.get("lastModifiedDateTime")
                          title = item.get("fields", {}).get("Title", "No title")
                          print(f"     {i+1}. '{title}' - created: {created}, modified: {modified}")
                      
                      # Use the first successful query for processing
                      if description == "createdDateTime desc":
                          break
              except Exception as e:
                  print(f"   ‚ùå Failed with {description}: {e}")
                  continue
          
          # ‚Äî Use environment variable or default to 24 hours ago for debugging ‚Äî
          last_check_env = os.environ.get('LAST_CHECK_TIMESTAMP')
          if last_check_env:
              last = int(last_check_env)
              print(f"üìÖ Using last check from env: {last}")
          else:
              last = int(time.time()) - (24 * 3600)  # 24 hours ago for debugging
              print(f"üìÖ Using default last check (24h ago): {last}")
              print(f"üìÖ Current time: {int(time.time())}")
              print(f"üìÖ Looking for items newer than: {time.strftime('%Y-%m-%d %H:%M:%S UTC', time.gmtime(last))}")
          
          # ‚Äî FETCH & LOOP ‚Äî
          try:
              resp = requests.get(url, headers={"Authorization": f"Bearer {token}"})
              resp.raise_for_status()
              data = resp.json()
              items = data.get("value", [])
              print(f"üî¢ Received {len(items)} items")
              
              # DEBUG: Print full response structure
              print("üîç DEBUG: Full API response keys:", list(data.keys()))
              if items:
                  print("üîç DEBUG: First item keys:", list(items[0].keys()))
                  print("üîç DEBUG: First item fields:", list(items[0].get("fields", {}).keys()))
                  print("üîç DEBUG: All creation dates:")
                  for i, item in enumerate(items[:10]):  # Show first 10
                      created = item.get("createdDateTime")
                      modified = item.get("lastModifiedDateTime") 
                      print(f"  Item {i+1}: created={created}, modified={modified}")
              
              new_last = last
              messages_sent = 0
              
              for idx, itm in enumerate(items, start=1):
                  dt = itm.get("createdDateTime")
                  print(f"üîÑ Processing item #{idx} ‚Äî id={itm.get('id')} createdDateTime={dt}")
                  
                  if not dt:
                      print("   ‚Ü≥ SKIP (no createdDateTime)")
                      continue
                  
                  # Better date parsing
                  try:
                      parsed_dt = parser.parse(dt)
                      ts = int(parsed_dt.timestamp())
                  except Exception as e:
                      print(f"   ‚Ü≥ SKIP (date parse error: {e})")
                      continue
                  
                  print(f"   ‚Ü≥ parsed ts={ts}, last={last}")
                  
                  if ts <= last:
                      print("   ‚Ü≥ BREAK (already processed)")
                      break
                  
                  # Get item details
                  fields = itm.get("fields", {})
                  title = fields.get("Title", "New SharePoint Item")
                  link = itm.get("webUrl", "")
                  
                  # Create message
                  message = f"üìã <b>{title}</b>"
                  if link:
                      message += f"\nüîó <a href='{link}'>View Item</a>"
                  
                  print(f"   ‚Ü≥ SENDING message: {title}")
                  
                  # Send to Telegram
                  try:
                      telegram_resp = requests.post(
                          f"https://api.telegram.org/bot{os.environ['BOT_TOKEN']}/sendMessage",
                          json={
                              "chat_id": os.environ['CHAT_ID'],
                              "parse_mode": "HTML",
                              "text": message,
                              "disable_web_page_preview": False
                          },
                          timeout=30
                      )
                      telegram_resp.raise_for_status()
                      messages_sent += 1
                      print(f"   ‚Ü≥ ‚úÖ Message sent successfully")
                  except Exception as e:
                      print(f"   ‚Ü≥ ‚ùå Telegram send failed: {e}")
                      continue
                  
                  new_last = max(new_last, ts)
                  print(f"   ‚Ü≥ new_last updated to {new_last}")
              
              print(f"üéâ Completed! Sent {messages_sent} messages")
              print(f"üíæ Would save new_last: {new_last}")
              
          except requests.exceptions.RequestException as e:
              print(f"‚ùå API request failed: {e}")
              exit(1)
          except Exception as e:
              print(f"‚ùå Unexpected error: {e}")
              exit(1)
          
          EOF
